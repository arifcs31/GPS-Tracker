{
  // Logging configuration:
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },


  // Allow to bind to any host.
  "AllowedHosts": "*",


  // Connection strings:
  "ConnectionStrings": {

    // Client data DB:
    "ClientDbContext": "Host=localhost; Database=Telemax2; Username=postgres;"

  },


  // App-level configuration.
  "App": {

    // Defines implementation of message consumer to use.
    "MessageConsumer": "Fake"

  },


  // Configuration of app services:
  "Services": {


    // Message processing broker, coordinates message consumer and message processor.
    "MessageProcessingBroker": {

      // Duration of the idle before the automatic flush.
      "IdleToFlush": "00:00:01"
    },


    // Message processor, buffers consumed messages and processes them in parallel.
    "MessageProcessor": {

      // Size of the message buffer.
      "BufferSize": 4200,

      // Maximal amount of message processing threads.
      "DegreeOfParallelism": 10

    },


    // EventHub message consumer, retrieves tracker messages from AzureEven Hub.
    "EventHubMessageConsumer": {

      // Event Hub connection string, name and consumer group.
      "EventHubConnStr": "Endpoint=sb://telemax.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=1pEOCHf8W5NMQWb4IUjrbvt40kXrDBnDXxvk/xaevAA=",
      "EventHubName": "trackermessages",
      "EventHubConsumerGroup": "Default",

      // Blob Storage connection string and container name.
      // Storage used by underlying EventProcessorClient to store checkpoints.
      "BlobStorageConnStr": "",
      "BlobContainerName": "",

      // Checkpoint size and interval, checkpoint updated in two cases:
      //  - amount of "unchecked" messages reaches CheckpointSize;
      //  - latest checkpoint was CheckpointInterval ago.
      "CheckpointSize": 100000,
      "CheckpointInterval": "00:00:10",

      // Graceful service shutdown timeout.
      "StopTimeout": "00:00:10"
    },


    // Fake message consumer, generates messages using given message factory function.
    "FakeMessageConsumer": {

      // Message population interval
      "MessagePopulationInterval": "00:00:00.000001",

      // Checkpoint size and interval, checkpoint updated in two cases:
      //  - amount of "unchecked" messages reaches CheckpointSize;
      //  - latest checkpoint was CheckpointInterval ago.
      "CheckpointSize": 1000000,
      "CheckpointInterval": "00:00:10"

    }




  }

}
